FORMAT: 1A
HOST: Meeting-env-1.skvkuamh23.us-west-2.elasticbeanstalk.com/

# Meeting Application

A simple API to create meetings. Postman collection available here: https://www.getpostman.com/collections/c18c4d79d8f02a74fac0. Use 'import' and then 'paste raw' to get a full copy of requests in postman.

## Registration [/api/register]

Users can register using this post action. 
An API token is returned which is needed for authentication in other requests.
### Register [POST]
+ Request (application/json)

        {
            "name" : "John Doe",
            "password" : "testpassword",
            "email" : "john@sample.com",
            "password_confirmation" : "testpassword"
        }

+ Response 201 (application/json)

    + Body

            {
                "data":{
                    "name": "John",
                    "email": "john@sample.com",
                    "api_token": "1234512345123451234512345",
                    "created_at" "Y-m-d H:m:s",
                    "updated_at" "Y-m-d H:m:s",
                    "id": 2
                }
            }
            
            
## Login [/api/login]

Users can login using their password an email to retrieve their api token.
### Login [POST]
+ Request (application/json)

        {
            "email" : "john@sample.com",
            "password_confirmation" : "testpassword"
        }

+ Response 200 (application/json)

    + Body

            {
                "data":{
                    "name": "John",
                    "email": "john@sample.com",
                    "api_token": "1234512345123451234512345",
                    "created_at" "Y-m-d H:m:s",
                    "updated_at" "Y-m-d H:m:s",
                    "id": 2
                }
            }
            
            
## Rooms [/api/rooms]

There exist 3 rooms in the database.
### List Rooms [GET]
+ Request (application/json)

    + Headers

            Authorization: Bearer 12345123455

+ Response 200 (application/json)

    + Body

            {
                "rooms":[
                    {
                        "id": 1,
                        "name":"Board Room"
                    },
                    {
                        "id": 2,
                        "name":"Break Room"
                    },
                    {
                        "id": 3,
                        "name":"Meeting Room"
                    }
                ]
            }

## Meetings by Room [/api/rooms/{room_id}/meetings{?before,after}]
Meetings can also be searched by room, filtered by a date range.
+ Parameters
    + room_id - A path variable for which room will be queried.
    + before (optional) - A date string (Y-m-d H:i) for which all meeting end_dates will be before.
    + after (optional) -  A date string (Y-m-d H:i) for which all meeting start_dates will be after.
### Get Meetings by room [GET]

+ Request (application/json)
        
    + Headers

            Authorization: Bearer 12345123455

+ Response 200 (application/json)

    + Body

            {
                "meetings":[
                    {
                        "room_id":2,
                        "name":"meeting 1",
                        "description":"test description",
                        "start_time":"2077-10-12 12:10",
                        "end_time": "2077-10-12 12:30",
                        "id":1
                    },
                    {
                        "room_id":2,
                        "name":"meeting 2",
                        "description":"test description",
                        "start_time":"2077-10-12 12:35",
                        "end_time": "2077-10-12 12:50",
                        "id":2
                    }
                ]
            }

## Meetings [/api/meetings]
You can create meetings in a room. There are several constraints. Meetings cannot overlap in a particular room. T
he meeting duration (from start_time to end_time) must be atleast 15 minutes and less than 3 hours. You cannot create meetings before the current time.
By default all time strings are in UTC.
### Create a New Meeting [POST]

+ Request (application/json)

        {
            "name": "Meeting Name",
            "description":"Weekly Meeting",
            "start_time":"2018-12-24 12:00",
            "end_time":"2018-12-24 13:00",
            "room_id": 1
        }

+ Response 201 (application/json)

    + Headers

            Authorization: Bearer 12345123455

    + Body
    
            {
                "meeting":{
                    "name": "Meeting Name",
                    "description":"Weekly Meeting",
                    "start_time":"2018-12-24 12:00",
                    "end_time":"2018-12-24 13:00",
                    "room_id": 1
                }
            }
            
### Meetings by User [/api/meetings{?before,after,user_id}]
Meetings can also be searched by room, filtered by a date range.
+ Parameters
    + user_id - A path variable for which user the meetings belong to. Default is the bearers meetings.
    + before (optional) - A date string (Y-m-d H:i) for which all meeting end_dates will be before.
    + after (optional) -  A date string (Y-m-d H:i) for which all meeting start_dates will be after.
### Get Meetings by room [GET]

+ Request (application/json)
        
    + Headers

            Authorization: Bearer 12345123455

+ Response 200 (application/json)

    + Body

            {
                "meetings":[
                    {
                        "room_id":2,
                        "name":"meeting 1",
                        "description":"test description",
                        "start_time":"2077-10-12 12:10",
                        "end_time": "2077-10-12 12:30",
                        "id":1
                    },
                    {
                        "room_id":2,
                        "name":"meeting 2",
                        "description":"test description",
                        "start_time":"2077-10-12 12:35",
                        "end_time": "2077-10-12 12:50",
                        "id":2
                    }
                ]
            }

## Individual Meeting Actions [/api/meetings/{meeting_id}]
### Get a Meeting by id [GET]

+ Request (application/json)
        
    + Headers

            Authorization: Bearer 12345123455

+ Response 200 (application/json)

    + Body
    
            {
                "meeting":{
                    "name": "Meeting Name",
                    "description":"Weekly Meeting",
                    "start_time":"2018-12-24 12:00",
                    "end_time":"2018-12-24 13:00",
                    "room_id": 1
                }
            }
            
### Update a Meeting [PATCH]
All fields are optional. The meeting will be updated to reflect changed fields.
A meeting cannot changed in a way that would make it invalid (conflicts with other meetings, duration constraints).

+ Request (application/json)

        {
            "name": "New Name",
            "description":"New Description",
            "start_time":"2018-12-24 13:00",
            "end_time":"2018-12-24 14:00",
            "room_id": 2
        }

+ Response 200 (application/json)

    + Body
    
            {
                "meeting":{
                    "name": "New Name",
                    "description":"New Description",
                    "start_time":"2018-12-24 13:00",
                    "end_time":"2018-12-24 14:00",
                    "room_id": 2
                }
            }
            
### Delete a Meeting [DELETE]
Soft deleting a meeting will cause it to not conflict with other meetings. Any user who is invited to this meeting instance will have their invitation status set to cancelled.

+ Request (application/json)


+ Response 204 (application/json)

## Invitations [/api/meetings/{meeting_id}/invitations]
### Create an Invitation [POST]

Users can be invited to meetings through invitations. All invitations are set to 

+ Request (application/json)

        {
            "user_id": 1,
        }

+ Response 201 (application/json)

    + Body

            {
                "invitation": {
                    "user_id": 1,
                    "meeting_id": 1,
                    "status": "pending"
                    "updated_at": "2017-10-05 00:08:30",
                    "created_at": "2017-10-05 00:08:30",
                    "id": 1
                }
            }
### Get Invitations for Meeting  [GET]

Users can be invited to meetings through invitations.

+ Request (application/json)


+ Response 200 (application/json)

    + Body

            {
                "invitations": {
                    {
                    "user_id": 1,
                    "meeting_id": 1,
                    "status": "pending"
                    "updated_at": "2017-10-05 00:08:30",
                    "created_at": "2017-10-05 00:08:30",
                    "id": 1
                    },
                    }
                    "user_id": 2,
                    "meeting_id": 1,
                    "status": "pending"
                    "updated_at": "2017-10-05 00:08:30",
                    "created_at": "2017-10-05 00:08:30",
                    "id": 2
                    } 
                }
            }

## Uninvite User [/api/meetings/{meeting_id}/invitations/{user_id}]
### Remove User Invitation [DELETE]

+ Request (application/json)


+ Response 204 (application/json)



## Get Invitations by Status [/api/invitations{?status}]
+ Parameters
    + status (optional) - A filter to only return invitations of certain status. The four types of invitation status are "accepted","rejected","cancelled","pending".
    
### Get my Invitations [GET]

Users can list all the invitations that they are invited to.

+ Request (application/json)

+ Response 200 (application/json)

    + Body
            
            {
                "invitation": {
                    "user_id": 1,
                    "meeting_id": 1,
                    "status": "pending"
                    "updated_at": "2017-10-05 00:08:30",
                    "created_at": "2017-10-05 00:08:30",
                    "id": 1
                }
            }

## Update Invitation [/api/invitations/{invitation_id}]
### Accept/Reject Invitation [PATCH]

Users can change the status of an invitation to 'accepted' or rejected'.

+ Request (application/json)

        {
            "status":"accepted"
        }

+ Response 200 (application/json)

    + Body

            {
                "invitation": {
                    "user_id": 1,
                    "meeting_id": 1,
                    "status": "acceptedate"
                    "updated_at": "2017-10-05 00:08:30",
                    "created_at": "2017-10-05 00:08:30",
                    "id": 1
                }
            }